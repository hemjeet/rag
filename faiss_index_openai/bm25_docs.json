[
  {
    "page_content": "Jacob Devlin Ming-Wei Chang Kenton Lee Kristina Toutanova Google AI Language ",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding"
    }
  },
  {
    "page_content": "We introduce a new language representation model called BERT, which stands for Bidirectional Encoder Representations from Transformers. Unlike recent language representation models [\\(Peters et al.,](#page-10-0) [2018a;](#page-10-0) [Rad](#page-10-1)[ford et al.,](#page-10-1) [2018\\)](#page-10-1), BERT is designed to pretrain deep bidirectional representations from unlabeled text by jointly conditioning on both left and right context in all layers. As a result, the pre-trained BERT model can be finetuned with just one additional output layer to create state-of-the-art models for a wide range of tasks, such as question answering and language inference, without substantial taskspecific architecture modifications.",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "Abstract"
    }
  },
  {
    "page_content": "BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art results on eleven natural language processing tasks, including pushing the GLUE score to 80.5% (7.7% point absolute improvement), MultiNLI accuracy to 86.7% (4.6% absolute improvement), SQuAD v1.1 question answering Test F1 to 93.2 (1.5 point absolute improvement) and SQuAD v2.0 Test F1 to 83.1 (5.1 point absolute improvement).",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "Abstract"
    }
  },
  {
    "page_content": "Language model pre-training has been shown to be effective for improving many natural language processing tasks [\\(Dai and Le,](#page-9-0) [2015;](#page-9-0) [Peters et al.,](#page-10-0) [2018a;](#page-10-0) [Radford et al.,](#page-10-1) [2018;](#page-10-1) [Howard and Ruder,](#page-9-1) [2018\\)](#page-9-1). These include sentence-level tasks such as natural language inference [\\(Bowman et al.,](#page-9-2) [2015;](#page-9-2) [Williams et al.,](#page-11-0) [2018\\)](#page-11-0) and paraphrasing [\\(Dolan](#page-9-3) [and Brockett,](#page-9-3) [2005\\)](#page-9-3), which aim to predict the relationships between sentences by analyzing them holistically, as well as token-level tasks such as named entity recognition and question answering, where models are required to produce fine-grained output at the token level [\\(Tjong Kim Sang and](#page-10-2) [De Meulder,](#page-10-2) [2003;](#page-10-2) [Rajpurkar et al.,](#page-10-3) [2016\\)](#page-10-3).",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "1 Introduction"
    }
  },
  {
    "page_content": "There are two existing strategies for applying pre-trained language representations to downstream tasks: *feature-based* and *fine-tuning*. The feature-based approach, such as ELMo [\\(Peters](#page-10-0) [et al.,](#page-10-0) [2018a\\)](#page-10-0), uses task-specific architectures that include the pre-trained representations as additional features. The fine-tuning approach, such as the Generative Pre-trained Transformer (OpenAI GPT) [\\(Radford et al.,](#page-10-1) [2018\\)](#page-10-1), introduces minimal task-specific parameters, and is trained on the downstream tasks by simply fine-tuning *all* pretrained parameters. The two approaches share the same objective function during pre-training, where they use unidirectional language models to learn general language representations.",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "1 Introduction"
    }
  },
  {
    "page_content": "We argue that current techniques restrict the power of the pre-trained representations, especially for the fine-tuning approaches. The major limitation is that standard language models are unidirectional, and this limits the choice of architectures that can be used during pre-training. For example, in OpenAI GPT, the authors use a left-toright architecture, where every token can only attend to previous tokens in the self-attention layers of the Transformer [\\(Vaswani et al.,](#page-10-4) [2017\\)](#page-10-4). Such restrictions are sub-optimal for sentence-level tasks, and could be very harmful when applying finetuning based approaches to token-level tasks such as question answering, where it is crucial to incorporate context from both directions.",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "1 Introduction"
    }
  },
  {
    "page_content": "In this paper, we improve the fine-tuning based approaches by proposing BERT: Bidirectional Encoder Representations from Transformers. BERT alleviates the previously mentioned unidirectionality constraint by using a \"masked language model\" (MLM) pre-training objective, inspired by the Cloze task [\\(Taylor,](#page-10-5) [1953\\)](#page-10-5). The masked language model randomly masks some of the tokens from the input, and the objective is to predict the original vocabulary id of the masked word based only on its context. Unlike left-toright language model pre-training, the MLM objective enables the representation to fuse the left and the right context, which allows us to pretrain a deep bidirectional Transformer. In addition to the masked language model, we also use a \"next sentence prediction\" task that jointly pretrains text-pair representations. The contributions of our paper are as follows:",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "1 Introduction"
    }
  },
  {
    "page_content": "- We demonstrate the importance of bidirectional pre-training for language representations. Unlike [Radford et al.](#page-10-1) [\\(2018\\)](#page-10-1), which uses unidirectional language models for pre-training, BERT uses masked language models to enable pretrained deep bidirectional representations. This is also in contrast to [Peters et al.](#page-10-0) [\\(2018a\\)](#page-10-0), which uses a shallow concatenation of independently trained left-to-right and right-to-left LMs. - We show that pre-trained representations reduce the need for many heavily-engineered taskspecific architectures. BERT is the first finetuning based representation model that achieves state-of-the-art performance on a large suite of sentence-level *and* token-level tasks, outperforming many task-specific architectures.",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "1 Introduction"
    }
  },
  {
    "page_content": "- BERT advances the state of the art for eleven NLP tasks. The code and pre-trained models are available at [ [google-research/bert](",
    "metadata": {
      "Header 1": "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding",
      "Header 2": "1 Introduction"
    }
  },
  {
    "page_content": "There is a long history of pre-training general language representations, and we briefly review the most widely-used approaches in this section.",
    "metadata": {
      "Header 1": "2 Related Work"
    }
  },
  {
    "page_content": "Learning widely applicable representations of words has been an active area of research for decades, including non-neural [\\(Brown et al.,](#page-9-4) [1992;](#page-9-4) [Ando and Zhang,](#page-9-5) [2005;](#page-9-5) [Blitzer et al.,](#page-9-6) [2006\\)](#page-9-6) and neural [\\(Mikolov et al.,](#page-10-6) [2013;](#page-10-6) [Pennington et al.,](#page-10-7) [2014\\)](#page-10-7) methods. Pre-trained word embeddings are an integral part of modern NLP systems, offering significant improvements over embeddings learned from scratch [\\(Turian et al.,](#page-10-8) [2010\\)](#page-10-8). To pretrain word embedding vectors, left-to-right language modeling objectives have been used [\\(Mnih](#page-10-9) [and Hinton,](#page-10-9) [2009\\)](#page-10-9), as well as objectives to discriminate correct from incorrect words in left and right context [\\(Mikolov et al.,](#page-10-6) [2013\\)](#page-10-6).",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "These approaches have been generalized to coarser granularities, such as sentence embeddings [\\(Kiros et al.,](#page-10-10) [2015;](#page-10-10) [Logeswaran and Lee,](#page-10-11) [2018\\)](#page-10-11) or paragraph embeddings [\\(Le and Mikolov,](#page-10-12) [2014\\)](#page-10-12). To train sentence representations, prior work has used objectives to rank candidate next sentences [\\(Jernite et al.,](#page-9-7) [2017;](#page-9-7) [Logeswaran and](#page-10-11) [Lee,](#page-10-11) [2018\\)](#page-10-11), left-to-right generation of next sentence words given a representation of the previous sentence [\\(Kiros et al.,](#page-10-10) [2015\\)](#page-10-10), or denoising autoencoder derived objectives [\\(Hill et al.,](#page-9-8) [2016\\)](#page-9-8).",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "ELMo and its predecessor [\\(Peters et al.,](#page-10-13) [2017,](#page-10-13) [2018a\\)](#page-10-0) generalize traditional word embedding research along a different dimension. They extract *context-sensitive* features from a left-to-right and a right-to-left language model. The contextual representation of each token is the concatenation of the left-to-right and right-to-left representations. When integrating contextual word embeddings with existing task-specific architectures, ELMo advances the state of the art for several major NLP benchmarks [\\(Peters et al.,](#page-10-0) [2018a\\)](#page-10-0) including question answering [\\(Rajpurkar et al.,](#page-10-3) [2016\\)](#page-10-3), sentiment analysis [\\(Socher et al.,](#page-10-14) [2013\\)](#page-10-14), and named entity recognition [\\(Tjong Kim Sang and De Meulder,](#page-10-2) [2003\\)](#page-10-2). [Melamud et al.](#page-10-15) [\\(2016\\)](#page-10-15) proposed learning contextual representations through a task to predict a single word",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "Kim Sang and De Meulder,](#page-10-2) [2003\\)](#page-10-2). [Melamud et al.](#page-10-15) [\\(2016\\)](#page-10-15) proposed learning contextual representations through a task to predict a single word from both left and right context using LSTMs. Similar to ELMo, their model is feature-based and not deeply bidirectional. [Fedus](#page-9-9) [et al.](#page-9-9) [\\(2018\\)](#page-9-9) shows that the cloze task can be used to improve the robustness of text generation models.",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "#### 2.2 Unsupervised Fine-tuning Approaches As with the feature-based approaches, the first works in this direction only pre-trained word embedding parameters from unlabeled text [\\(Col](#page-9-10)[lobert and Weston,](#page-9-10) [2008\\)](#page-9-10).",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "More recently, sentence or document encoders which produce contextual token representations have been pre-trained from unlabeled text and fine-tuned for a supervised downstream task [\\(Dai](#page-9-0) [and Le,](#page-9-0) [2015;](#page-9-0) [Howard and Ruder,](#page-9-1) [2018;](#page-9-1) [Radford](#page-10-1) [et al.,](#page-10-1) [2018\\)](#page-10-1). The advantage of these approaches is that few parameters need to be learned from scratch. At least partly due to this advantage, OpenAI GPT [\\(Radford et al.,](#page-10-1) [2018\\)](#page-10-1) achieved previously state-of-the-art results on many sentencelevel tasks from the GLUE benchmark [\\(Wang](#page-10-16) [et al.,](#page-10-16) [2018a\\)](#page-10-16). Left-to-right language model- <span id=\"page-2-0\"></span>![](_page_2_Figure_0.jpeg)",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "<span id=\"page-2-0\"></span>![](_page_2_Figure_0.jpeg) Figure 1: Overall pre-training and fine-tuning procedures for BERT. Apart from output layers, the same architectures are used in both pre-training and fine-tuning. The same pre-trained model parameters are used to initialize models for different down-stream tasks. During fine-tuning, all parameters are fine-tuned. [CLS] is a special symbol added in front of every input example, and [SEP] is a special separator token (e.g. separating questions/answers). ing and auto-encoder objectives have been used for pre-training such models (Howard and Ruder, 2018; Radford et al., 2018; Dai and Le, 2015).",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "#### 2.3 Transfer Learning from Supervised Data There has also been work showing effective transfer from supervised tasks with large datasets, such as natural language inference (Conneau et al., 2017) and machine translation (McCann et al., 2017). Computer vision research has also demonstrated the importance of transfer learning from large pre-trained models, where an effective recipe is to fine-tune models pre-trained with ImageNet (Deng et al., 2009; Yosinski et al., 2014).",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "2.1 Unsupervised Feature-based Approaches"
    }
  },
  {
    "page_content": "We introduce BERT and its detailed implementation in this section. There are two steps in our framework: *pre-training* and *fine-tuning*. During pre-training, the model is trained on unlabeled data over different pre-training tasks. For finetuning, the BERT model is first initialized with the pre-trained parameters, and all of the parameters are fine-tuned using labeled data from the downstream tasks. Each downstream task has separate fine-tuned models, even though they are initialized with the same pre-trained parameters. The question-answering example in Figure 1 will serve as a running example for this section. A distinctive feature of BERT is its unified architecture across different tasks. There is minimal difference between the pre-trained architecture and the final downstream architecture.",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "**3** BERT"
    }
  },
  {
    "page_content": "A distinctive feature of BERT is its unified architecture across different tasks. There is minimal difference between the pre-trained architecture and the final downstream architecture. **Model Architecture** BERT's model architecture is a multi-layer bidirectional Transformer encoder based on the original implementation described in Vaswani et al. (2017) and released in the tensor2tensor library.<sup>1</sup> Because the use of Transformers has become common and our implementation is almost identical to the original, we will omit an exhaustive background description of the model architecture and refer readers to Vaswani et al. (2017) as well as excellent guides such as \"The Annotated Transformer.\"<sup>2</sup>",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "**3** BERT"
    }
  },
  {
    "page_content": "In this work, we denote the number of layers (i.e., Transformer blocks) as *L*, the hidden size as *H*, and the number of self-attention heads as A.<sup>3</sup> We primarily report results on two model sizes: **BERT**<sub>BASE</sub> (L=12, H=768, A=12, Total Parameters=110M) and **BERT**<sub>LARGE</sub> (L=24, H=1024, A=16, Total Parameters=340M). BERT<sub>BASE</sub> was chosen to have the same model size as OpenAI GPT for comparison purposes. Critically, however, the BERT Transformer uses bidirectional self-attention, while the GPT Transformer uses constrained self-attention where every token can only attend to context to its left.<sup>4</sup> <span id=\"page-2-3\"></span><span id=\"page-2-2\"></span><span id=\"page-2-1\"></span><sup>&</sup>lt;sup>1</sup> <sup>2</sup> <sup>3</sup>In all cases we set the feed-forward/filter size to be 4*H*,",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "**3** BERT"
    }
  },
  {
    "page_content": "<span id=\"page-2-4\"></span>i.e., 3072 for the H = 768 and 4096 for the H = 1024. <sup>4</sup>We note that in the literature the bidirectional Trans- Input/Output Representations To make BERT handle a variety of down-stream tasks, our input representation is able to unambiguously represent both a single sentence and a pair of sentences (e.g., h Question, Answeri) in one token sequence. Throughout this work, a \"sentence\" can be an arbitrary span of contiguous text, rather than an actual linguistic sentence. A \"sequence\" refers to the input token sequence to BERT, which may be a single sentence or two sentences packed together.",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "**3** BERT"
    }
  },
  {
    "page_content": "We use WordPiece embeddings [\\(Wu et al.,](#page-11-2) [2016\\)](#page-11-2) with a 30,000 token vocabulary. The first token of every sequence is always a special classification token ([CLS]). The final hidden state corresponding to this token is used as the aggregate sequence representation for classification tasks. Sentence pairs are packed together into a single sequence. We differentiate the sentences in two ways. First, we separate them with a special token ([SEP]). Second, we add a learned embedding to every token indicating whether it belongs to sentence A or sentence B. As shown in Figure [1,](#page-2-0) we denote input embedding as E, the final hidden vector of the special [CLS] token as C âˆˆ R H, and the final hidden vector for the i th input token as T<sup>i</sup> âˆˆ R H.",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "**3** BERT"
    }
  },
  {
    "page_content": "For a given token, its input representation is constructed by summing the corresponding token, segment, and position embeddings. A visualization of this construction can be seen in Figure [2.](#page-4-0)",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "**3** BERT"
    }
  },
  {
    "page_content": "Unlike [Peters et al.](#page-10-0) [\\(2018a\\)](#page-10-0) and [Radford et al.](#page-10-1) [\\(2018\\)](#page-10-1), we do not use traditional left-to-right or right-to-left language models to pre-train BERT. Instead, we pre-train BERT using two unsupervised tasks, described in this section. This step is presented in the left part of Figure [1.](#page-2-0) Task #1: Masked LM Intuitively, it is reasonable to believe that a deep bidirectional model is strictly more powerful than either a left-to-right model or the shallow concatenation of a left-toright and a right-to-left model. Unfortunately, standard conditional language models can only be trained left-to-right *or* right-to-left, since bidirectional conditioning would allow each word to indirectly \"see itself\", and the model could trivially predict the target word in a multi-layered context.",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "3.1 Pre-training BERT"
    }
  },
  {
    "page_content": "In order to train a deep bidirectional representation, we simply mask some percentage of the input tokens at random, and then predict those masked tokens. We refer to this procedure as a \"masked LM\" (MLM), although it is often referred to as a *Cloze* task in the literature [\\(Taylor,](#page-10-5) [1953\\)](#page-10-5). In this case, the final hidden vectors corresponding to the mask tokens are fed into an output softmax over the vocabulary, as in a standard LM. In all of our experiments, we mask 15% of all WordPiece tokens in each sequence at random. In contrast to denoising auto-encoders [\\(Vincent et al.,](#page-10-18) [2008\\)](#page-10-18), we only predict the masked words rather than reconstructing the entire input.",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "3.1 Pre-training BERT"
    }
  },
  {
    "page_content": "Although this allows us to obtain a bidirectional pre-trained model, a downside is that we are creating a mismatch between pre-training and fine-tuning, since the [MASK] token does not appear during fine-tuning. To mitigate this, we do not always replace \"masked\" words with the actual [MASK] token. The training data generator chooses 15% of the token positions at random for prediction. If the i-th token is chosen, we replace the i-th token with (1) the [MASK] token 80% of the time (2) a random token 10% of the time (3) the unchanged i-th token 10% of the time. Then, T<sup>i</sup> will be used to predict the original token with cross entropy loss. We compare variations of this procedure in Appendix [C.2.](#page-15-0)",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "3.1 Pre-training BERT"
    }
  },
  {
    "page_content": "Task #2: Next Sentence Prediction (NSP) Many important downstream tasks such as Question Answering (QA) and Natural Language Inference (NLI) are based on understanding the *relationship* between two sentences, which is not directly captured by language modeling. In order to train a model that understands sentence relationships, we pre-train for a binarized *next sentence prediction* task that can be trivially generated from any monolingual corpus. Specifically, when choosing the sentences A and B for each pretraining example, 50% of the time B is the actual next sentence that follows A (labeled as IsNext), and 50% of the time it is a random sentence from the corpus (labeled as NotNext). As we show in Figure [1,](#page-2-0) C is used for next sentence prediction (NSP).[5](#page-3-0) Despite its simplicity, we demonstrate in Section [5.1](#page-7-0) that pre-training towards this task is very beneficial to both QA and NLI. [6](#page-3-1)",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "3.1 Pre-training BERT"
    }
  },
  {
    "page_content": "former is often referred to as a \"Transformer encoder\" while the left-context-only version is referred to as a \"Transformer decoder\" since it can be used for text generation. <span id=\"page-3-1\"></span><span id=\"page-3-0\"></span><sup>5</sup>The final model achieves 97%-98% accuracy on NSP. <sup>6</sup>The vector C is not a meaningful sentence representation without fine-tuning, since it was trained with NSP.",
    "metadata": {
      "Header 1": "2 Related Work",
      "Header 2": "3.1 Pre-training BERT"
    }
  }
]